#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 17 11:19:35 2021

@author: marijn
"""
#settings image
import scipy.io
settings = scipy.io.loadmat('12 5 10x10 averaged grey.mat')

#load and display matplotlib
from matplotlib import image

#load as pixel array
image = image.imread('12 5 10x10 averaged grey.png')
print(image.dtype)
print(image.shape)

#show image
#pyplot.imshow(image)
#pyplot.show()

#convert np array
import numpy as np
from numpy import asarray
npdata = asarray(image)
print("numpy data shape:")
print(npdata.shape)

from PIL import Image

#convert grayscale
im_grey= Image.open('12 5 10x10 averaged grey.png').convert('L')
im_grey.save('GrayScale.png')
im_grey_numpy = np.array(im_grey) #stores grey in np array

# random spot location: 
x_spot = 453
y_spot = 349

#range around max
xrange = 13
yrange = 13

x_low = x_spot - xrange
x_high = x_spot + xrange

y_low = y_spot - yrange
y_high = y_spot + yrange

#crop image around random spot location
#first selecting right rows (y), then right columns (x)
spot = im_grey_numpy[y_low:y_high, x_low:x_high]

spotCropped = Image.fromarray(spot)
spotCropped.save('spotCropped.png')

#2d plot
import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(13,4),constrained_layout=True)

axes[0].imshow(spot)
axes[0].set_xlabel('pixels x')
axes[0].set_ylabel('pixels y')
axes[0].set_title('One of the spots')

# 1D plots
#slice 1D row and column where max is
rowSum = spot.sum(axis=0) #take one row (where max is)
columnSum = spot.sum(axis=1) #take one column (where max is)

#make 1d arrays
xpixels = np.arange(x_low , x_high, 1)
ypixels = np.arange(y_low, y_high, 1)

"""
fit data with gaussian
"""

from scipy import optimize

#define gaussian
def gaussian(x, amplitude, mean, stddev):
    return amplitude * np.exp(-((x - mean) / 4 / stddev)**2)

#initial values
initialValuesX = 1000, 450, 2 #amplitude, center, sigma
initialValuesY = 1000, 350, 2

#Fit data, starting with initial values to converge easier
bestValuesX, covarX = optimize.curve_fit(gaussian, xpixels, rowSum, p0 = initialValuesX)
amplitudeX = bestValuesX[0]
meanX = bestValuesX[1]
stddevX = bestValuesX[2]

bestValuesY, covarY = optimize.curve_fit(gaussian, ypixels, columnSum, p0 = initialValuesY)
amplitudeY = bestValuesY[0]
meanY = bestValuesY[1]
stddevY = bestValuesY[2]

#horizontal
axes[1].grid()
axes[1].scatter(xpixels, rowSum)
axes[1].plot(xpixels, gaussian(xpixels,amplitudeX, meanX, stddevX),color='r')
axes[1].set_xlabel('horizontal pixels')
axes[1].set_ylabel('Counts')
axes[1].set_title('Histogram horizontal')

#vertical
axes[2].grid()
axes[2].scatter(ypixels, columnSum)
axes[2].plot(ypixels, gaussian(ypixels,amplitudeY, meanY, stddevY),color='r')
axes[2].set_xlabel('vertical pixels')
axes[2].set_ylabel('Counts')
axes[2].set_title('Histogram vertical')

#saving and showing
plt.savefig('analyzing spot.png', dpi = 500)
plt.show()

#calculating sigma
#pixel size camera
dx, dy = 4.65 , 4.65

sigmaX , sigmaY = stddevX * dx , stddevY * dy
print(sigmaX, sigmaY)




